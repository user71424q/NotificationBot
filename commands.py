import telebot
from telebot import types
from config import load_configuration
from TODO import *
from db_interact import *
from datetime import datetime
from data_parsing import *

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config_path = "./config.ini"
try:
    config_data = load_configuration(config_path)
    admins = set(
        config_data["admins"]
    )  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
    print("–¢–æ–∫–µ–Ω –±–æ—Ç–∞:", config_data["token"])
    print("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:", config_data["admins"])
    db_conn = db_connect("./dbconfig.ini")
    print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
    bot = telebot.TeleBot(config_data["token"])
except Exception as e:
    print("–û—à–∏–±–∫–∞:", str(e))
    exit(1)


# –î–ï–ö–û–†–ê–¢–û–† ADMIN ONLY COMMAND
def admin_required(func):
    def wrapped(message):
        user_username = message.from_user.username
        if not user_username:
            bot.send_message(
                message.chat.id,
                "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ç–µ–≥–∞ (username), –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
            )
            return
        if not (user_username in admins or "@" + user_username in admins):
            bot.send_message(
                message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
            )
            return
        return func(message)

    return wrapped


@bot.message_handler(commands=["start"])
def handle_start(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-—Ç–µ–≥–∞, —Ç–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞ —ç—Ç–æ.
    :param_name message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    user_username = message.from_user.username
    welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!"
    if user_username:
        welcome_text += f" –í–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º —Ç–µ–≥: @{user_username}."
        if user_username in admins or "@" + user_username in admins:
            welcome_text += " –í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞."
            db_add_user(db_conn, f"{user_username}", role_type_id=1)
            db_set_user_chatid(db_conn, user_username, message.chat.id)
        else:
            welcome_text += " –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!"
            db_add_user(db_conn, f"{user_username}", role_type_id=2)
            db_set_user_chatid(db_conn, user_username, message.chat.id)
    else:
        welcome_text += " –í–Ω–∏–º–∞–Ω–∏–µ: —É –í–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º —Ç–µ–≥, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."

    bot.send_message(message.chat.id, welcome_text)


@bot.message_handler(commands=["listme"])
def list_events_for_user(message):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º–∏ –∑–∞–¥–∞—á.
    :param_name message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tag = message.from_user.username
    if not user_tag:
        bot.send_message(
            message.chat.id,
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ç–µ–≥–∞ (username), –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.",
        )
        return

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∏ –¥–µ–¥–ª–∞–π–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_id = db_get_user_by_tg(db_conn, user_tag)["id"]
    events = db_get_user_tasks(db_conn, user_id)

    if not events:
        bot.send_message(message.chat.id, "–í—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω–æ —Å–æ–±—ã—Ç–∏–µ.")
        return
    response_message = "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –¥–µ–¥–ª–∞–π–Ω—ã:\n"
    grouped_tasks = {}
    for event in events:
        group_keyname = event["group_keyname"]
        if group_keyname not in grouped_tasks:
            grouped_tasks[group_keyname] = []
        grouped_tasks[group_keyname].append(event)
    for group, tasks in grouped_tasks.items():
        response_message += f"üìÖ {group}:\n"
        for task in tasks:
            deadline_str = task["deadline"].strftime("%Y-%m-%d %H:%M:%S")
            response_message += f"   - {task['name']}: {deadline_str}\n"
        remind_info = (
            f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {task['org_remind_in_minutes']} –º–∏–Ω—É—Ç –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞."
            if task["org_remind_in_minutes"] is not None
            else "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
        )
        response_message += f"   {remind_info}\n"
    bot.send_message(message.chat.id, response_message)


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
user_data = {}


def get_user_step(user_tag: str) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (step)
    :param_name user_tag: –¢–µ–ª–µ–≥—Ä–∞–º-—Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ @
    """
    if user_tag in user_data:
        return user_data[user_tag]["step"]
    else:
        return "AWAITING_COMMANDS"


@bot.message_handler(commands=["newevent"])
@admin_required
def new_event(message):
    """
    –ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–∞—Ö
    :param_name message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_tag = message.from_user.username
    if user_tag not in user_data:
        user_data[user_tag] = {"step": None, "file_id": None, "event_name": None}
    markup = types.ForceReply(selective=False)
    bot.send_message(
        message.chat.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª Excel —Å –∑–∞–¥–∞—á–∞–º–∏ –∏ –∏—Ö –¥–µ–¥–ª–∞–π–Ω–∞–º–∏, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –ø–æ —à–∞–±–ª–æ–Ω—É.",
        reply_markup=markup,
    )
    user_data[user_tag]["step"] = "AWAITING_FILE"


@bot.message_handler(
    func=lambda message: get_user_step(message.from_user.username) == "AWAITING_FILE",
    content_types=["document"],
)
def handle_document(message):
    """
    –ü–æ–ª—É—á–∏—Ç—å Excel —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–∞—Ö –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    :param_name message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_tag = message.from_user.username
    file_name = message.document.file_name
    if not (file_name.endswith(".xls") or file_name.endswith(".xlsx")):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.")
        return
    user_data[user_tag]["file_id"] = message.document.file_id
    file_id = user_data[user_tag]["file_id"]
    downloaded_file = bot.download_file(bot.get_file(file_id).file_path)
    try:
        data_list = parse_pandas_dataframe(parse_excel(downloaded_file))
        user_data[user_tag]["data_list"] = data_list
        user_data[user_tag]["step"] = "AWAITING_EVENT_NAME"
        bot.send_message(
            message.chat.id, "–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
    except ValueError:
        bot.send_message(
            message.chat.id, "Excel-—Ñ–∞–π–ª –∑–∞–ø–æ–ª–Ω–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç—Ä–µ–±—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: YYYY-mm-dd HH:MM:SS"
        )


@bot.message_handler(
    func=lambda message: get_user_step(message.from_user.username)
    == "AWAITING_EVENT_NAME"
)
def event_name_received(message):
    """
    –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ, —á–µ–º 12 —Å–∏–º–≤–æ–ª–æ–≤
    :param_name message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    event_name = message.text
    if len(event_name) > 12:
        bot.send_message(
            message.chat.id,
            f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–ª–∏–Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 12 —Å–∏–º–≤–æ–ª–æ–≤.",
        )
    elif '/' in event_name:
        bot.send_message(
            message.chat.id,
            f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: /. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
        )
    else:
        user_tag = message.from_user.username
        user_data[user_tag]["step"] = "AWAITING_REMIND_TIME"
        user_data[user_tag]["event_name"] = event_name
        bot.send_message(
            message.chat.id,
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º",
        )


@bot.message_handler(
    func=lambda message: get_user_step(message.from_user.username)
    == "AWAITING_REMIND_TIME"
)
def time_received(message):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º.
    –ù–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ 120 –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω–æ –∑–∞ 2 —á–∞—Å–∞ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞.
    :param_name message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        user_tag = message.from_user.username
        remind_time = int(message.text)             # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∏—Å–ª–æ
        if remind_time > 0:                         # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ —á–∏—Å–ª–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
            event_name = user_data[user_tag]["event_name"]
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ –ë–î
            db_add_task_group(db_conn, event_name, remind_time)     
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞, –µ—Å–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î        
            db_set_task_group_remind(db_conn, db_get_task_group_by_keyname(db_conn, event_name)["id"], remind_time) 
            unique_participants = set()
            for event in user_data[user_tag]["data_list"]:
                unique_participants.update(event['participants'])
            for participant in unique_participants:
                if len(participant) >= 5:
                    db_add_user(db_conn, participant)
            filtered_events = [
                {**event, 'participants': [db_get_user_by_tg(db_conn, p)["id"] for p in event['participants'] if len(p) >= 5]}
                for event in user_data[user_tag]["data_list"]
            ]
            db_set_tasks(
                db_conn, filtered_events,
                db_get_task_group_by_keyname(db_conn, event_name)["id"],
                False,
            )
            bot.send_message(
                message.chat.id,
                f"–°–æ–±—ã—Ç–∏–µ '{event_name}' —Å–æ–∑–¥–∞–Ω–æ/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ.",
            )
            user_data[user_tag]["step"] = "AWAITING_COMMANDS"
        else:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")


@bot.message_handler(commands=["listall"])
@admin_required
def listall(message):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º–∏ –∑–∞–¥–∞—á, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏.
    :param_name message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    events = db_get_task_groups(db_conn)
    if not events:
        bot.send_message(
            message.chat.id, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"
        )
    else:
        formatted_info = ""
        for event in events:
            tasks = db_get_tasks_in_group(db_conn, event['id'])
            unfinished_event_count = 0
            for task in tasks:
                if task['reminder_sent'] == 0:
                    unfinished_event_count += 1
                    break
            if unfinished_event_count == 0: continue
            formatted_info += (
                f"üîπ {event['keyname']}: \n"
                f"–ó–∞–¥–∞—á: {event['n_tasks']}, "
                f"–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {event['remind_in_minutes']} –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞.\n"
            )
        bot.send_message(message.chat.id, formatted_info)


@bot.message_handler(commands=["delete_task"])
@admin_required
def delete(message):
    user_tag = message.from_user.username
    if user_tag not in user_data:
        user_data[user_tag] = {}
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    user_data[user_tag]["step"] = "AWAITING_DELETION"


@bot.message_handler(func=lambda message: get_user_step(message.from_user.username)
    == "AWAITING_DELETION")
def deletion_name(message):
    user_tag = message.from_user.username
    user_data[user_tag]["step"] = "AWAITING_COMMANDS"
    task_name = message.text
    try:
        db_del_task_group(db_conn, db_get_task_group_by_keyname(db_conn, task_name)['id'])
        bot.send_message(message.chat.id, '–£–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
    except:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è')